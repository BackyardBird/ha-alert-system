# packages/alert_system.yaml
# Modern GUI-based Telegram integration version with dual-channel support
# This file is IDENTICAL across all three houses
# Only the chat IDs in the GUI integration and secrets differ per house

script:
  # Main alert script - this is your primary tool
  send_alert:
    alias: "Send Alert"
    description: "Send a formatted alert via Telegram"
    fields:
      message:
        description: "Alert message content"
        example: "Kitchen smoke detector activated"
        required: true
      level:
        description: "Alert level (info/warning/critical)"
        example: "warning"
        default: "info"
      location:
        description: "Location/room where alert originated"
        example: "Kitchen"
        required: false
      include_timestamp:
        description: "Include timestamp in message"
        example: "true"
        default: true
      chat_id:
        description: "Specific chat ID to send to (optional)"
        example: "-1001234567890"
        required: false
      channel:
        description: "Alert channel (main/technical/both)"
        example: "main"
        default: "main"
    sequence:
      - variables:
          level_emoji: >
            {% if level == 'critical' %}üö®
            {% elif level == 'warning' %}‚ö†Ô∏è
            {% else %}‚ÑπÔ∏è{% endif %}
          house_name: !secret house_name
          timestamp: >
            {% if include_timestamp | default(true) %}
            {{ now().strftime('%H:%M') }}
            {% endif %}
          main_chat: !secret telegram_main_alerts
          tech_chat: !secret telegram_technical_alerts
      - choose:
          # Custom chat_id overrides everything
          - conditions:
              - condition: template
                value_template: "{{ chat_id is defined and chat_id != '' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ chat_id | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          # Main channel
          - conditions:
              - condition: template
                value_template: "{{ channel == 'main' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          # Technical channel
          - conditions:
              - condition: template
                value_template: "{{ channel == 'technical' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          # Both channels
          - conditions:
              - condition: template
                value_template: "{{ channel == 'both' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"

        # Default fallback for invalid channels - send to technical channel
        default:
          - action: telegram_bot.send_message
            data:
              target: "{{ tech_chat | int }}"
              message: "<b>‚ö†Ô∏è {{ house_name|upper }} WARNING</b> {{ timestamp }}\nüö® ALERT SYSTEM: Invalid channel '{{ channel }}' specified. Message sent to technical channel as fallback.\n\nOriginal message: {{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
              parse_mode: "HTML"
              
  # Quick alert for simple notifications (main channel)
  quick_alert:
    alias: "Quick Alert"
    description: "Send a simple info-level alert to main channel"
    fields:
      message:
        description: "Alert message"
        required: true
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "info"
          channel: "main"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  # System alert for technical issues (technical channel by default)
  system_alert:
    alias: "System Alert"
    description: "Send a system-level alert to technical channel"
    fields:
      message:
        description: "System alert message"
        required: true
      level:
        description: "Alert level"
        default: "warning"
      channel:
        description: "Alert channel (main/technical/both)"
        default: "technical"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "üñ•Ô∏è SYSTEM: {{ message }}"
          level: "{{ level | default('warning') }}"
          channel: "{{ channel | default('technical') }}"
          chat_id: "{{ chat_id | default('') }}"
          location: ""
          include_timestamp: true

  # Security alert for security-related events (both channels)
  security_alert:
    alias: "Security Alert"
    description: "Send a security alert to both channels"
    fields:
      message:
        description: "Security alert message"
        required: true
      location:
        description: "Location of security event"
        required: false
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "üîí SECURITY: {{ message }}"
          level: "critical"
          location: "{{ location | default('') }}"
          channel: "both"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  # Device alert for device-specific notifications (technical channel by default)
  device_alert:
    alias: "Device Alert"
    description: "Send a device-related alert to technical channel"
    fields:
      device_name:
        description: "Name of the device"
        required: true
      message:
        description: "Device alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      channel:
        description: "Alert channel (main/technical/both)"
        default: "technical"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ device_name }}: {{ message }}"
          level: "{{ level | default('info') }}"
          channel: "{{ channel | default('technical') }}"
          chat_id: "{{ chat_id | default('') }}"
          location: ""
          include_timestamp: true

  # Bulk alert for sending multiple alerts
  bulk_alert:
    alias: "Bulk Alert"
    description: "Send multiple alerts at once"
    fields:
      alerts:
        description: "List of alerts to send"
        required: true
    sequence:
      - repeat:
          for_each: "{{ alerts }}"
          sequence:
            - action: script.send_alert
              data:
                message: "{{ repeat.item.message }}"
                level: "{{ repeat.item.level | default('info') }}"
                location: "{{ repeat.item.location | default('') }}"
                channel: "{{ repeat.item.channel | default('main') }}"
                chat_id: "{{ repeat.item.chat_id | default('') }}"

  # Test alert to verify system is working (both channels)
  test_alert:
    alias: "Test Alert System"
    description: "Send a test alert to verify the system is working"
    fields:
      chat_id:
        description: "Specific chat ID to test (optional)"
        required: false
      channel:
        description: "Channel to test (main/technical/both)"
        default: "both"
    sequence:
      - action: script.send_alert
        data:
          message: "Alert system test - everything is working correctly! üéâ"
          level: "info"
          channel: "{{ channel | default('both') }}"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  # Technical-specific convenience scripts
  tech_alert:
    alias: "Technical Alert"
    description: "Send alert specifically to technical channel"
    fields:
      message:
        description: "Technical alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          channel: "technical"
          include_timestamp: true

  main_alert:
    alias: "Main Alert"
    description: "Send alert specifically to main channel"
    fields:
      message:
        description: "Main alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          channel: "main"
          include_timestamp: true

  # ===================================
  # THRESHOLD ALERT SYSTEM SCRIPTS
  # ===================================
  
  # Threshold alert management scripts
  add_threshold_alert:
    alias: "Add Threshold Alert"
    description: "Add an entity to threshold monitoring"
    fields:
      entity_id:
        description: "Entity to monitor"
        required: true
        example: "sensor.temperature"
      threshold:
        description: "Threshold value"
        required: true
        example: "25"
      condition:
        description: "Trigger condition"
        required: true
        example: "above"
        selector:
          select:
            options:
              - "above"
              - "below"
      custom_message:
        description: "Custom alert message (optional)"
        required: false
        example: "Temperature is critical"
    sequence:
      - variables:
          entity_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id.split('.')[1] | replace('_', ' ') | title }}"
          default_message: >
            {% if condition == 'above' %}
              {{ entity_name }} is above threshold
            {% else %}
              {{ entity_name }} is below threshold
            {% endif %}
          alert_message: "{{ custom_message if custom_message else default_message }}"
          new_entry: "{{ entity_id }}:{{ threshold }}:{{ condition }}:{{ alert_message }}"
          
          # Find which input_text helper has space
          target_helper: >
            {% for i in range(1, 4) %}
              {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
              {% set current_content = states(helper_name) %}
              {% set new_content = current_content + ('|' if current_content else '') + new_entry %}
              {% if new_content | length <= 250 %}
                {{ helper_name }}
                {%- break -%}
              {% endif %}
            {% endfor %}
          
          updated_entities: >
            {% set helper = target_helper %}
            {% set current_content = states(helper) %}
            {% if current_content %}
              {{ current_content }}|{{ new_entry }}
            {% else %}
              {{ new_entry }}
            {% endif %}
      
      - if:
          - condition: template
            value_template: "{{ target_helper != '' }}"
        then:
          - action: input_text.set_value
            target:
              entity_id: "{{ target_helper }}"
            data:
              value: "{{ updated_entities }}"
          
          - action: script.tech_alert
            data:
              message: "Added threshold alert for {{ entity_name }}: {{ condition }} {{ threshold }}"
              level: info
        else:
          - action: script.tech_alert
            data:
              message: "Error: All threshold storage helpers are full. Please remove some entities first."
              level: warning

  remove_threshold_alert:
    alias: "Remove Threshold Alert"
    description: "Remove an entity from threshold monitoring"
    fields:
      entity_id:
        description: "Entity to remove"
        required: true
    sequence:
      - variables:
          # Check all helpers for the entity
          found_helper: >
            {% set ns = namespace(helper='') %}
            {% for i in range(1, 4) %}
              {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
              {% set current_entities = states(helper_name) %}
              {% set entities_list = current_entities.split('|') if current_entities else [] %}
              {% for item in entities_list %}
                {% if item.split(':')[0] == entity_id and ns.helper == '' %}
                  {% set ns.helper = helper_name %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {{ ns.helper }}
          
          filtered_entities: >
            {% if found_helper %}
              {% set current_entities = states(found_helper) %}
              {% set entities_list = current_entities.split('|') if current_entities else [] %}
              {% set ns = namespace(items=[]) %}
              {% for item in entities_list %}
                {% if item.split(':')[0] != entity_id %}
                  {% set ns.items = ns.items + [item] %}
                {% endif %}
              {% endfor %}
              {{ ns.items | join('|') }}
            {% else %}
              
            {% endif %}
      
      - if:
          - condition: template
            value_template: "{{ found_helper != '' }}"
        then:
          - action: input_text.set_value
            target:
              entity_id: "{{ found_helper }}"
            data:
              value: "{{ filtered_entities }}"
          
          - action: script.tech_alert
            data:
              message: "Removed threshold alert for {{ entity_id }}"
              level: info
        else:
          - action: script.tech_alert
            data:
              message: "Entity {{ entity_id }} not found in threshold alerts"
              level: warning

  list_threshold_alerts:
    alias: "List Threshold Alerts"
    description: "Show all configured threshold alerts"
    sequence:
      - variables:
          alert_list: >
            {% set ns = namespace(alerts=[]) %}
            {% for i in range(1, 4) %}
              {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
              {% set entities_text = states(helper_name) %}
              {% set entities_list = entities_text.split('|') if entities_text else [] %}
              {% for item in entities_list %}
                {% set parts = item.split(':') %}
                {% if parts | length >= 4 %}
                  {% set entity = parts[0] %}
                  {% set threshold = parts[1] %}
                  {% set condition = parts[2] %}
                  {% set message = parts[3:] | join(':') %}
                  {% set entity_name = state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title %}
                  {% set current_value = states(entity) %}
                  {% set alert_text = entity_name + ': ' + condition + ' ' + threshold + ' (current: ' + current_value + ')' %}
                  {% set ns.alerts = ns.alerts + [alert_text] %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {{ ns.alerts | join('\n') if ns.alerts else 'No threshold alerts configured' }}
      
      - action: script.tech_alert
        data:
          message: |
            üìä THRESHOLD ALERTS STATUS
            
            {{ alert_list }}
          level: info

  # Quick setup scripts for common sensor types
  add_temperature_alert:
    alias: "Add Temperature Alert"
    description: "Quick setup for temperature threshold"
    fields:
      entity_id:
        description: "Temperature sensor"
        required: true
        selector:
          entity:
            domain: sensor
            device_class: temperature
      high_threshold:
        description: "High temperature threshold"
        required: false
        example: "25"
      low_threshold:
        description: "Low temperature threshold" 
        required: false
        example: "10"
    sequence:
      - if:
          - condition: template
            value_template: "{{ high_threshold is defined and high_threshold != '' }}"
        then:
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ high_threshold }}"
              condition: "above"
              custom_message: "Temperature is too high"
      
      - if:
          - condition: template
            value_template: "{{ low_threshold is defined and low_threshold != '' }}"
        then:
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ low_threshold }}"
              condition: "below"
              custom_message: "Temperature is too low"

  add_battery_alert:
    alias: "Add Battery Alert"
    description: "Quick setup for battery level threshold"
    fields:
      entity_id:
        description: "Battery sensor"
        required: true
        selector:
          entity:
            domain: sensor
            device_class: battery
      threshold:
        description: "Low battery threshold"
        required: true
        default: "20"
        example: "15"
    sequence:
      - action: script.add_threshold_alert
        data:
          entity_id: "{{ entity_id }}"
          threshold: "{{ threshold }}"
          condition: "below"
          custom_message: "Battery level is low"

  add_humidity_alert:
    alias: "Add Humidity Alert"  
    description: "Quick setup for humidity threshold"
    fields:
      entity_id:
        description: "Humidity sensor"
        required: true
        selector:
          entity:
            domain: sensor
            device_class: humidity
      high_threshold:
        description: "High humidity threshold"
        required: false
        example: "70"
      low_threshold:
        description: "Low humidity threshold"
        required: false
        example: "30"
    sequence:
      - if:
          - condition: template
            value_template: "{{ high_threshold is defined and high_threshold != '' }}"
        then:
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ high_threshold }}"
              condition: "above"
              custom_message: "Humidity is too high"
      
      - if:
          - condition: template
            value_template: "{{ low_threshold is defined and low_threshold != '' }}"
        then:
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ low_threshold }}"
              condition: "below"
              custom_message: "Humidity is too low"

  # Bulk management and testing
  clear_all_threshold_alerts:
    alias: "Clear All Threshold Alerts"
    description: "Remove all configured threshold alerts"
    sequence:
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities
        data:
          value: ""
      
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_2
        data:
          value: ""
      
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_3
        data:
          value: ""
      
      - action: script.tech_alert
        data:
          message: "All threshold alerts have been cleared"
          level: warning

  test_threshold_alert:
    alias: "Test Threshold Alert"
    description: "Send a test threshold alert"
    sequence:
      - action: script.send_alert
        data:
          message: |
            üß™ THRESHOLD ALERT TEST
            
            This is a test of the threshold alert system.
            Current time: {{ now().strftime('%H:%M:%S') }}
          level: info
          channel: "{{ states('input_select.threshold_alert_channel') }}"
          location: "Test System"

  # Card form management scripts
  create_threshold_alert_from_form:
    alias: "Create Threshold Alert from Form"
    description: "Create threshold alert using the card form inputs"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_threshold_entity') }}"
          threshold: "{{ states('input_number.temp_threshold_value') }}"
          condition: "{{ states('input_select.temp_threshold_condition') }}"
          message: "{{ states('input_text.temp_threshold_message') }}"
      
      - if:
          - condition: template
            value_template: "{{ entity_id != '' and entity_id != 'unknown' }}"
        then:
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ threshold }}"
              condition: "{{ condition }}"
              custom_message: >
                {% if message != '' and message != 'unknown' %}
                  {{ message }}
                {% else %}
                  {% endif %}
          
          # Clear the form after successful creation
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_threshold_entity
            data:
              value: ""
          
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_threshold_message
            data:
              value: ""
          
          - action: input_number.set_value
            target:
              entity_id: input_number.temp_threshold_value
            data:
              value: 20
          
          - action: script.tech_alert
            data:
              message: "‚úÖ Threshold alert created successfully via dashboard form"
              level: info
        else:
          - action: script.tech_alert
            data:
              message: "‚ùå Error: Please enter a valid entity ID"
              level: warning

  # Quick setup with entity discovery
  quick_battery_alert_setup:
    alias: "Quick Battery Alert Setup"
    description: "Quick setup for battery alerts with entity suggestions"
    sequence:
      - variables:
          battery_entities: >
            {% set ns = namespace(entities=[]) %}
            {% for entity in states.sensor %}
              {% if entity.attributes.device_class == 'battery' %}
                {% set ns.entities = ns.entities + [entity.entity_id] %}
              {% endif %}
            {% endfor %}
            {{ ns.entities[:10] }}
      
      - action: script.tech_alert
        data:
          message: |
            üîã BATTERY ALERT SETUP
            
            Available battery sensors:
            {% for entity in battery_entities %}
            - {{ state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title }} ({{ entity }})
            {% endfor %}
            
            Use the form above to add alerts for these entities.
            Recommended threshold: 20% (below)
          level: info

  quick_temperature_alert_setup:
    alias: "Quick Temperature Alert Setup"
    description: "Quick setup for temperature alerts with entity suggestions"
    sequence:
      - variables:
          temp_entities: >
            {% set ns = namespace(entities=[]) %}
            {% for entity in states.sensor %}
              {% if entity.attributes.device_class == 'temperature' %}
                {% set ns.entities = ns.entities + [entity.entity_id] %}
              {% endif %}
            {% endfor %}
            {{ ns.entities[:10] }}
      
      - action: script.tech_alert
        data:
          message: |
            üå°Ô∏è TEMPERATURE ALERT SETUP
            
            Available temperature sensors:
            {% for entity in temp_entities %}
            - {{ state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title }} ({{ entity }})
            {% endfor %}
            
            Use the form above to add high/low temperature alerts.
            Tip: Set both 'above' and 'below' thresholds for the same entity.
          level: info

  quick_humidity_alert_setup:
    alias: "Quick Humidity Alert Setup"
    description: "Quick setup for humidity alerts with entity suggestions"
    sequence:
      - variables:
          humidity_entities: >
            {% set ns = namespace(entities=[]) %}
            {% for entity in states.sensor %>
              {% if entity.attributes.device_class == 'humidity' %}
                {% set ns.entities = ns.entities + [entity.entity_id] %}
              {% endif %}
            {% endfor %}
            {{ ns.entities[:10] }}
      
      - action: script.tech_alert
        data:
          message: |
            üíß HUMIDITY ALERT SETUP
            
            Available humidity sensors:
            {% for entity in humidity_entities %}
            - {{ state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title }} ({{ entity }})
            {% endfor %}
            
            Use the form above to add humidity alerts.
            Common thresholds: 30% (below) for too dry, 70% (above) for too humid.
          level: info

  remove_threshold_alert_from_form:
    alias: "Remove Threshold Alert from Form"
    description: "Remove threshold alert using the card form"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_remove_entity') }}"
      
      - if:
          - condition: template
            value_template: "{{ entity_id != '' and entity_id != 'unknown' }}"
        then:
          - action: script.remove_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
          
          # Clear the form
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_remove_entity
            data:
              value: ""
        else:
          - action: script.tech_alert
            data:
              message: "‚ùå Error: Please enter a valid entity ID to remove"
              level: warning

  discover_threshold_candidates:
    alias: "Discover Threshold Alert Candidates"
    description: "Find sensors suitable for threshold monitoring"
    sequence:
      - variables:
          numeric_sensors: >
            {% set ns = namespace(sensors=[]) %}
            {% for entity in states.sensor %}
              {% if entity.state | float(none) is not none %}
                {% if entity.attributes.device_class in ['temperature', 'humidity', 'battery', 'pressure', 'power', 'energy', 'current', 'voltage'] %}
                  {% set ns.sensors = ns.sensors + [entity.entity_id] %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ ns.sensors[:20] }}
      
      - action: script.tech_alert
        data:
          message: |
            üîç THRESHOLD ALERT CANDIDATES
            
            Found {{ numeric_sensors | length }} suitable sensors:
            {% for entity in numeric_sensors %}
            - {{ state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title }}
              ID: {{ entity }}
              Current: {{ states(entity) }}{{ state_attr(entity, 'unit_of_measurement') or '' }}
            {% endfor %}
            
            Use these entity IDs in the threshold alert form above.
          level: info

# ===================================
# INPUT HELPERS (CONSOLIDATED)
# ===================================

input_text:
  # Main threshold storage helpers
  threshold_entities:
    name: "Threshold Alert Entities"
    initial: ""
    max: 255

  threshold_entities_2:
    name: "Threshold Alert Entities (Group 2)"
    initial: ""
    max: 255

  threshold_entities_3:
    name: "Threshold Alert Entities (Group 3)" 
    initial: ""
    max: 255

  # Form input helpers
  temp_threshold_entity:
    name: "Temporary Threshold Entity"
    initial: ""
    max: 100

  temp_threshold_message:
    name: "Temporary Threshold Message"
    initial: ""
    max: 200

  temp_remove_entity:
    name: "Temporary Remove Entity"
    initial: ""
    max: 100

input_boolean:
  threshold_alerts_enabled:
    name: "Enable Threshold Alerts"
    initial: true
    icon: mdi:alert-circle

input_select:
  threshold_alert_channel:
    name: "Default Alert Channel"
    options:
      - main
      - technical
      - both
    initial: main
    icon: mdi:message-alert

  temp_threshold_condition:
    name: "Temporary Threshold Condition"
    options:
      - "above"
      - "below"
    initial: "above"

input_number:
  temp_threshold_value:
    name: "Temporary Threshold Value"
    min: -999
    max: 9999
    step: 0.1
    initial: 20

# ===================================
# TEMPLATE SENSORS (CONSOLIDATED WITH UNIQUE IDs)
# ===================================

template:
  - sensor:
      - name: "Threshold Alert Count"
        unique_id: "pkg_threshold_alert_count"
        state: >
          {% set count = 0 %}
          {% for i in range(1, 4) %}
            {% set entity_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
            {% set entities = states(entity_name) %}
            {% if entities %}
              {% set count = count + entities.split('|') | length %}
            {% endif %}
          {% endfor %}
          {{ count }}
        icon: mdi:counter
        
      - name: "Threshold Alert Status"
        unique_id: "pkg_threshold_alert_status"
        state: >
          {% if is_state('input_boolean.threshold_alerts_enabled', 'on') %}
            {% set count = states('sensor.threshold_alert_count') | int %}
            {% if count > 0 %}
              Monitoring {{ count }} entities
            {% else %}
              No entities configured
            {% endif %}
          {% else %}
            Disabled
          {% endif %}
        icon: mdi:shield-check

      - name: "Low Battery Devices"
        unique_id: "pkg_low_battery_devices"
        state: >
          {% set ns = namespace(count=0) %}
          {% for entity in states.sensor %}
            {% if entity.attributes.device_class == 'battery' and entity.state | float(101) < 20 %}
              {% set ns.count = ns.count + 1 %}
            {% endif %}
          {% endfor %}
          {{ ns.count }}
        attributes:
          devices: >
            {% set ns = namespace(devices=[]) %}
            {% for entity in states.sensor %}
              {% if entity.attributes.device_class == 'battery' and entity.state | float(101) < 20 %}
                {% set device_name = entity.attributes.friendly_name or entity.entity_id.split('.')[1] | replace('_', ' ') | title %}
                {% set ns.devices = ns.devices + [device_name + ': ' + entity.state + '%'] %}
              {% endif %}
            {% endfor %}
            {{ ns.devices }}
        icon: mdi:battery-alert
        unit_of_measurement: "devices"

      - name: "Threshold Alert Form Status"
        unique_id: "pkg_threshold_form_status"
        state: >
          {% set entity = states('input_text.temp_threshold_entity') %}
          {% set value = states('input_number.temp_threshold_value') %}
          {% if entity != '' and entity != 'unknown' %}
            {% if states(entity) != 'unknown' %}
              Ready to create
            {% else %}
              Invalid entity
            {% endif %}
          {% else %}
            Enter entity ID
          {% endif %}
        attributes:
          entity_valid: >
            {% set entity = states('input_text.temp_threshold_entity') %}
            {{ entity != '' and entity != 'unknown' and states(entity) != 'unknown' }}
          current_value: >
            {% set entity = states('input_text.temp_threshold_entity') %}
            {% if entity != '' and entity != 'unknown' and states(entity) != 'unknown' %}
              {{ states(entity) }}{{ state_attr(entity, 'unit_of_measurement') or '' }}
            {% else %}
              N/A
            {% endif %}
          suggested_threshold: >
            {% set entity = states('input_text.temp_threshold_entity') %}
            {% if entity != '' and entity != 'unknown' and states(entity) != 'unknown' %}
              {% set device_class = state_attr(entity, 'device_class') %}
              {% if device_class == 'battery' %}
                20 (below)
              {% elif device_class == 'temperature' %}
                25 (above) or 18 (below)
              {% elif device_class == 'humidity' %}
                70 (above) or 30 (below)
              {% else %}
                Set based on normal range
              {% endif %}
            {% else %}
              N/A
            {% endif %}
        icon: mdi:form-select

      - name: "Threshold Storage Usage"
        unique_id: "pkg_threshold_storage_usage"
        state: >
          {% set total_chars = 0 %}
          {% set max_chars = 765 %}
          {% for i in range(1, 4) %}
            {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
            {% set content = states(helper_name) %}
            {% if content %}
              {% set total_chars = total_chars + content | length %}
            {% endif %}
          {% endfor %}
          {{ (total_chars / max_chars * 100) | round(1) }}
        attributes:
          total_characters: >
            {% set total_chars = 0 %}
            {% for i in range(1, 4) %}
              {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
              {% set content = states(helper_name) %}
              {% if content %}
                {% set total_chars = total_chars + content | length %}
              {% endif %}
            {% endfor %}
            {{ total_chars }}
          max_characters: 765
          helper_1_usage: "{{ states('input_text.threshold_entities') | length }}/255"
          helper_2_usage: "{{ states('input_text.threshold_entities_2') | length }}/255"  
          helper_3_usage: "{{ states('input_text.threshold_entities_3') | length }}/255"
        icon: mdi:gauge
        unit_of_measurement: "%"

      - name: "Threshold System Health"
        unique_id: "pkg_threshold_system_health"
        state: >
          {% set issues = [] %}
          
          {% if not is_state('input_boolean.threshold_alerts_enabled', 'on') %}
            {% set issues = issues + ['System disabled'] %}
          {% endif %}
          
          {% set total_entities = states('sensor.threshold_alert_count') | int %}
          {% if total_entities == 0 %}
            {% set issues = issues + ['No entities configured'] %}
          {% endif %}
          
          {% set storage_usage = states('sensor.threshold_storage_usage') | float(0) %}
          {% if storage_usage > 90 %}
            {% set issues = issues + ['Storage nearly full'] %}
          {% endif %}
          
          {% set invalid_count = 0 %}
          {% for i in range(1, 4) %}
            {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
            {% set entities_text = states(helper_name) %}
            {% set entities_list = entities_text.split('|') if entities_text else [] %}
            {% for item in entities_list %}
              {% set parts = item.split(':') %}
              {% if parts | length >= 4 %}
                {% set entity = parts[0] %}
                {% if states(entity) == 'unknown' %}
                  {% set invalid_count = invalid_count + 1 %}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          
          {% if invalid_count > 0 %}
            {% set issues = issues + [invalid_count ~ ' invalid entities'] %}
          {% endif %}
          
          {% if issues | length == 0 %}
            Healthy
          {% else %}
            {{ issues | length }} issues
          {% endif %}
        attributes:
          issues: >
            {% set issues = [] %}
            {% if not is_state('input_boolean.threshold_alerts_enabled', 'on') %}
              {% set issues = issues + ['System disabled'] %}
            {% endif %}
            {% set total_entities = states('sensor.threshold_alert_count') | int %}
            {% if total_entities == 0 %}
              {% set issues = issues + ['No entities configured'] %}
            {% endif %}
            {% set storage_usage = states('sensor.threshold_storage_usage') | float(0) %}
            {% if storage_usage > 90 %}
              {% set issues = issues + ['Storage nearly full (' ~ storage_usage ~ '%)'] %}
            {% endif %}
            {{ issues }}
          last_checked: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
        icon: >
          {% set issues = state_attr('sensor.threshold_system_health', 'issues') | length %}
          {% if issues == 0 %}
            mdi:shield-check
          {% elif issues <= 2 %}
            mdi:shield-alert
          {% else %}
            mdi:shield-remove
          {% endif %}

# ===================================
# AUTOMATIONS 
# ===================================

automation:
  - alias: "Threshold Alert Monitor"
    id: "threshold_alert_monitor"
    description: "Monitor entities for threshold breaches"
    trigger:
      - platform: state
        entity_id: 
          - sensor.dummy_trigger
    condition:
      - condition: state
        entity_id: input_boolean.threshold_alerts_enabled
        state: 'on'
    action:
      - variables:
          all_entities: >
            {% set ns = namespace(entities=[]) %}
            {% for i in range(1, 4) %}
              {% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}
              {% set entities_text = states(helper_name) %}
              {% set entities_list = entities_text.split('|') if entities_text else [] %}
              {% set ns.entities = ns.entities + entities_list %}
            {% endfor %}
            {{ ns.entities }}
          triggered_entity: "{{ trigger.entity_id }}"
          new_state: "{{ trigger.to_state.state }}"
          old_state: "{{ trigger.from_state.state if trigger.from_state else 'unknown' }}"
      
      - repeat:
          for_each: "{{ all_entities }}"
          sequence:
            - variables:
                parts: "{{ repeat.item.split(':') }}"
                monitor_entity: "{{ parts[0] if parts | length >= 4 else '' }}"
                threshold_value: "{{ parts[1] | float if parts | length >= 4 else 0 }}"
                condition_type: "{{ parts[2] if parts | length >= 4 else 'above' }}"
                alert_message: "{{ parts[3:] | join(':') if parts | length >= 4 else 'Threshold alert' }}"
            
            - condition: template
              value_template: "{{ monitor_entity == triggered_entity }}"
            
            - condition: template
              value_template: >
                {% set current_val = new_state | float(0) %}
                {% set old_val = old_state | float(0) %}
                {% set threshold = threshold_value %}
                
                {% if condition_type == 'above' %}
                  {{ current_val > threshold and old_val <= threshold }}
                {% else %}
                  {{ current_val < threshold and old_val >= threshold }}
                {% endif %}
            
            - variables:
                entity_name: "{{ state_attr(monitor_entity, 'friendly_name') or monitor_entity.split('.')[1] | replace('_', ' ') | title }}"
                current_value: "{{ new_state }}"
                unit: "{{ state_attr(monitor_entity, 'unit_of_measurement') or '' }}"
                alert_channel: "{{ states('input_select.threshold_alert_channel') }}"
            
            - action: script.send_alert
              data:
                message: >
                  üö® {{ alert_message }}
                  
                  Current value: {{ current_value }} {{ unit }}
                  Threshold: {{ condition_type }} {{ threshold_value }} {{ unit }}
                level: warning
                channel: "{{ alert_channel }}"
                location: "{{ entity_name }}"

  - alias: "Update Threshold Alert Triggers"
    id: "update_threshold_alert_triggers"
    description: "Update automation triggers when threshold entities change"
    trigger:
      - platform: state
        entity_id: 
          - input_text.threshold_entities
          - input_text.threshold_entities_2
          - input_text.threshold_entities_3
    action:
      - action: script.tech_alert
        data:
          message: "Threshold entities updated. Go to Developer Tools ‚Üí YAML ‚Üí Reload AUTOMATIONS for changes to take effect."
          level: info
