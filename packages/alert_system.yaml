# packages/alert_system.yaml
# Version: 3.0.1 - MAJOR REWRITE
# Significant simplification and cleanup
# Removed quick setup and discovery scripts for simplicity
# Fixed all YAML syntax issues

script:
  # ===================================
  # CORE ALERT SYSTEM SCRIPTS
  # ===================================
  
  send_alert:
    alias: "Send Alert"
    description: "Send a formatted alert via Telegram"
    fields:
      message:
        description: "Alert message content"
        example: "Kitchen smoke detector activated"
        required: true
      level:
        description: "Alert level (info/warning/critical)"
        example: "warning"
        default: "info"
      location:
        description: "Location/room where alert originated"
        example: "Kitchen"
        required: false
      include_timestamp:
        description: "Include timestamp in message"
        example: "true"
        default: true
      chat_id:
        description: "Specific chat ID to send to (optional)"
        example: "-1001234567890"
        required: false
      channel:
        description: "Alert channel (main/technical/both)"
        example: "main"
        default: "main"
    sequence:
      - variables:
          level_emoji: "{% if level == 'critical' %}üö®{% elif level == 'warning' %}‚ö†Ô∏è{% else %}‚ÑπÔ∏è{% endif %}"
          house_name: !secret house_name
          timestamp: "{% if include_timestamp | default(true) %}{{ now().strftime('%H:%M') }}{% endif %}"
          main_chat: !secret telegram_main_alerts
          tech_chat: !secret telegram_technical_alerts
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ chat_id is defined and chat_id != '' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ chat_id | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'main' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'technical' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'both' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
                  parse_mode: "HTML"
        default:
          - action: telegram_bot.send_message
            data:
              target: "{{ tech_chat | int }}"
              message: "<b>‚ö†Ô∏è {{ house_name|upper }} WARNING</b> {{ timestamp }}\nüö® ALERT SYSTEM: Invalid channel '{{ channel }}' specified. Message sent to technical channel as fallback.\n\nOriginal message: {{ message | e }}{% if location %}\nüìç {{ location | e }}{% endif %}"
              parse_mode: "HTML"

  quick_alert:
    alias: "Quick Alert"
    description: "Send a simple info-level alert to main channel"
    fields:
      message:
        description: "Alert message"
        required: true
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "info"
          channel: "main"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  system_alert:
    alias: "System Alert"
    description: "Send a system-level alert to technical channel"
    fields:
      message:
        description: "System alert message"
        required: true
      level:
        description: "Alert level"
        default: "warning"
      channel:
        description: "Alert channel (main/technical/both)"
        default: "technical"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "üñ•Ô∏è SYSTEM: {{ message }}"
          level: "{{ level | default('warning') }}"
          channel: "{{ channel | default('technical') }}"
          chat_id: "{{ chat_id | default('') }}"
          location: ""
          include_timestamp: true

  security_alert:
    alias: "Security Alert"
    description: "Send a security alert to both channels"
    fields:
      message:
        description: "Security alert message"
        required: true
      location:
        description: "Location of security event"
        required: false
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "üîí SECURITY: {{ message }}"
          level: "critical"
          location: "{{ location | default('') }}"
          channel: "both"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  device_alert:
    alias: "Device Alert"
    description: "Send a device-related alert to technical channel"
    fields:
      device_name:
        description: "Name of the device"
        required: true
      message:
        description: "Device alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      channel:
        description: "Alert channel (main/technical/both)"
        default: "technical"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ device_name }}: {{ message }}"
          level: "{{ level | default('info') }}"
          channel: "{{ channel | default('technical') }}"
          chat_id: "{{ chat_id | default('') }}"
          location: ""
          include_timestamp: true

  tech_alert:
    alias: "Technical Alert"
    description: "Send alert specifically to technical channel"
    fields:
      message:
        description: "Technical alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          channel: "technical"
          include_timestamp: true

  main_alert:
    alias: "Main Alert"
    description: "Send alert specifically to main channel"
    fields:
      message:
        description: "Main alert message"
        required: true
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          channel: "main"
          include_timestamp: true

  test_alert:
    alias: "Test Alert System"
    description: "Send a test alert to verify the system is working"
    fields:
      chat_id:
        description: "Specific chat ID to test (optional)"
        required: false
      channel:
        description: "Channel to test (main/technical/both)"
        default: "both"
    sequence:
      - action: script.send_alert
        data:
          message: "Alert system test - everything is working correctly! üéâ"
          level: "info"
          channel: "{{ channel | default('both') }}"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  # ===================================
  # THRESHOLD ALERT SYSTEM SCRIPTS
  # ===================================

  add_threshold_alert:
    alias: "Add Threshold Alert"
    description: "Add an entity to threshold monitoring"
    fields:
      entity_id:
        description: "Entity to monitor"
        required: true
        example: "sensor.temperature"
      threshold:
        description: "Threshold value"
        required: true
        example: "25"
      condition:
        description: "Trigger condition"
        required: true
        example: "above"
      custom_message:
        description: "Custom alert message (optional)"
        required: false
        example: "Temperature is critical"
    sequence:
      - variables:
          entity_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id.split('.')[1] | replace('_', ' ') | title }}"
          default_message: "{% if condition == 'above' %}{{ entity_name }} is above threshold{% else %}{{ entity_name }} is below threshold{% endif %}"
          alert_message: "{{ custom_message if custom_message else default_message }}"
          new_entry: "{{ entity_id }}:{{ threshold }}:{{ condition }}:{{ alert_message }}"
          target_helper: "{% for i in range(1, 4) %}{% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set current_content = states(helper_name) %}{% set new_content = current_content + ('|' if current_content else '') + new_entry %}{% if new_content | length <= 250 %}{{ helper_name }}{%- break -%}{% endif %}{% endfor %}"
          updated_entities: "{% set helper = target_helper %}{% set current_content = states(helper) %}{% if current_content %}{{ current_content }}|{{ new_entry }}{% else %}{{ new_entry }}{% endif %}"
      - if:
          - condition: template
            value_template: "{{ target_helper != '' }}"
        then:
          - action: input_text.set_value
            target:
              entity_id: "{{ target_helper }}"
            data:
              value: "{{ updated_entities }}"
          - action: script.tech_alert
            data:
              message: "Added threshold alert for {{ entity_name }}: {{ condition }} {{ threshold }}"
              level: info
        else:
          - action: script.tech_alert
            data:
              message: "Error: All threshold storage helpers are full. Please remove some entities first."
              level: warning

  remove_threshold_alert:
    alias: "Remove Threshold Alert"
    description: "Remove an entity from threshold monitoring"
    fields:
      entity_id:
        description: "Entity to remove"
        required: true
    sequence:
      - variables:
          found_helper: "{% set ns = namespace(helper='') %}{% for i in range(1, 4) %}{% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set current_entities = states(helper_name) %}{% set entities_list = current_entities.split('|') if current_entities else [] %}{% for item in entities_list %}{% if item.split(':')[0] == entity_id and ns.helper == '' %}{% set ns.helper = helper_name %}{% endif %}{% endfor %}{% endfor %}{{ ns.helper }}"
          filtered_entities: "{% if found_helper %}{% set current_entities = states(found_helper) %}{% set entities_list = current_entities.split('|') if current_entities else [] %}{% set ns = namespace(items=[]) %}{% for item in entities_list %}{% if item.split(':')[0] != entity_id %}{% set ns.items = ns.items + [item] %}{% endif %}{% endfor %}{{ ns.items | join('|') }}{% else %}{% endif %}"
      - if:
          - condition: template
            value_template: "{{ found_helper != '' }}"
        then:
          - action: input_text.set_value
            target:
              entity_id: "{{ found_helper }}"
            data:
              value: "{{ filtered_entities }}"
          - action: script.tech_alert
            data:
              message: "Removed threshold alert for {{ entity_id }}"
              level: info
        else:
          - action: script.tech_alert
            data:
              message: "Entity {{ entity_id }} not found in threshold alerts"
              level: warning

  list_threshold_alerts:
    alias: "List Threshold Alerts"
    description: "Show all configured threshold alerts"
    sequence:
      - variables:
          alert_list: "{% set ns = namespace(alerts=[]) %}{% for i in range(1, 4) %}{% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set entities_text = states(helper_name) %}{% set entities_list = entities_text.split('|') if entities_text else [] %}{% for item in entities_list %}{% set parts = item.split(':') %}{% if parts | length >= 4 %}{% set entity = parts[0] %}{% set threshold = parts[1] %}{% set condition = parts[2] %}{% set entity_name = state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title %}{% set current_value = states(entity) %}{% set alert_text = entity_name + ': ' + condition + ' ' + threshold + ' (current: ' + current_value + ')' %}{% set ns.alerts = ns.alerts + [alert_text] %}{% endif %}{% endfor %}{% endfor %}{{ ns.alerts | join('\n') if ns.alerts else 'No threshold alerts configured' }}"
      - action: script.tech_alert
        data:
          message: |
            üìä THRESHOLD ALERTS STATUS
            
            {{ alert_list }}
          level: info

  clear_all_threshold_alerts:
    alias: "Clear All Threshold Alerts"
    description: "Remove all configured threshold alerts"
    sequence:
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_2
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_3
        data:
          value: ""
      - action: script.tech_alert
        data:
          message: "All threshold alerts have been cleared"
          level: warning

  test_threshold_alert:
    alias: "Test Threshold Alert"
    description: "Send a test threshold alert"
    sequence:
      - action: script.send_alert
        data:
          message: |
            üß™ THRESHOLD ALERT TEST
            
            This is a test of the threshold alert system.
            Current time: {{ now().strftime('%H:%M:%S') }}
          level: info
          channel: "{{ states('input_select.threshold_alert_channel') }}"
          location: "Test System"

  create_threshold_alert_from_form:
    alias: "Create Threshold Alert from Form"
    description: "Create threshold alert using the card form inputs with improved validation"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_threshold_entity') }}"
          threshold: "{{ states('input_text.temp_threshold_value') }}"
          condition: "{{ states('input_select.temp_threshold_condition') }}"
          message: "{{ states('input_text.temp_threshold_message') }}"
      - if:
          - condition: template
            value_template: "{{ entity_id != '' and entity_id != 'unknown' and entity_id != 'unavailable' and entity_id.count('.') == 1 and entity_id != 'None' }}"
        then:
          - if:
              - condition: template
                value_template: "{{ states(entity_id) not in ['unknown', 'unavailable'] }}"
            then:
              - action: script.add_threshold_alert
                data:
                  entity_id: "{{ entity_id }}"
                  threshold: "{{ threshold }}"
                  condition: "{{ condition }}"
                  custom_message: "{{ message if message != '' and message != 'unknown' else '' }}"
              - action: input_text.set_value
                target:
                  entity_id: input_text.temp_threshold_entity
                data:
                  value: ""
              - action: input_text.set_value
                target:
                  entity_id: input_text.temp_threshold_message
                data:
                  value: ""
              - action: input_text.set_value
                target:
                  entity_id: input_text.temp_threshold_value
                data:
                  value: "20"
              - action: script.tech_alert
                data:
                  message: "‚úÖ Threshold alert created successfully for {{ state_attr(entity_id, 'friendly_name') or entity_id }}"
                  level: info
            else:
              - action: script.tech_alert
                data:
                  message: "‚ùå Error: Entity '{{ entity_id }}' exists but is currently unavailable or unknown. Please check the entity state."
                  level: warning
        else:
          - action: script.tech_alert
            data:
              message: "‚ùå Error: Please enter a valid entity ID. {% if entity_id == '' or entity_id == 'unavailable' %}Entity ID field is empty or invalid.{% elif entity_id.count('.') != 1 %}Entity ID should have format: domain.entity_name{% else %}Please check the entity ID format.{% endif %} Example: sensor.living_room_temperature"
              level: warning

  remove_threshold_alert_from_form:
    alias: "Remove Threshold Alert from Form"
    description: "Remove threshold alert using the card form"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_remove_entity') }}"
      - if:
          - condition: template
            value_template: "{{ entity_id != '' and entity_id != 'unknown' }}"
        then:
          - action: script.remove_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_remove_entity
            data:
              value: ""
        else:
          - action: script.tech_alert
            data:
              message: "‚ùå Error: Please enter a valid entity ID to remove"
              level: warning

  # ===================================
  # BINARY SENSOR AUTOMATION GENERATOR SCRIPTS
  # ===================================

  generate_binary_automation_yaml:
    alias: "Generate Binary Automation YAML"
    description: "Generate automation YAML with improved validation"
    sequence:
      - variables:
          entity: "{{ states('input_text.binary_automation_entity') }}"
          message: "{{ states('input_text.binary_automation_message') }}"
          location: "{{ states('input_text.binary_automation_location') }}"
          trigger_state: "{{ states('input_select.binary_automation_trigger_state') }}"
          level: "{{ states('input_select.binary_automation_level') }}"
          channel: "{{ states('input_select.binary_automation_channel') }}"
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ entity == '' or entity == 'unknown' or entity == 'unavailable' }}"
            sequence:
              - action: persistent_notification.create
                data:
                  title: "‚ùå Missing Entity ID"
                  message: "Please enter a binary sensor entity ID. Go to Developer Tools ‚Üí States and filter by 'binary_sensor.' to find entity IDs."
                  notification_id: "yaml_error"
          - conditions:
              - condition: template
                value_template: "{{ message == '' or message == 'unknown' or message == 'unavailable' }}"
            sequence:
              - action: persistent_notification.create
                data:
                  title: "‚ùå Missing Alert Message"
                  message: "Please enter an alert message that will be sent to Telegram when the automation triggers."
                  notification_id: "yaml_error"
          - conditions:
              - condition: template
                value_template: "{{ states(entity) in ['unknown', 'unavailable'] }}"
            sequence:
              - action: persistent_notification.create
                data:
                  title: "‚ùå Entity Not Found"
                  message: "Entity '{{ entity }}' not found or unavailable. Please check spelling and ensure the device is online."
                  notification_id: "yaml_error"
        default:
          - variables:
              entity_name: "{{ state_attr(entity, 'friendly_name') or entity.split('.')[1] | replace('_', ' ') | title }}"
              automation_name: "{{ entity_name }} Alert"
              yaml_content: |
                # Generated Binary Sensor Automation
                alias: "{{ automation_name }}"
                description: "Alert when {{ entity_name }} changes to {{ trigger_state }}"
                trigger:
                  - platform: state
                    entity_id: {{ entity }}
                    to: "{{ trigger_state }}"
                condition: []
                action:
                  - action: script.send_alert
                    data:
                      message: "{{ message }}"
                      level: "{{ level }}"
                      channel: "{{ channel }}"{% if location %}
                      location: "{{ location }}"{% endif %}
                mode: single
              # Split YAML across multiple helpers if needed
              yaml_part1: "{{ yaml_content[:250] }}"
              yaml_part2: "{{ yaml_content[250:500] if yaml_content | length > 250 else '' }}"
              yaml_part3: "{{ yaml_content[500:750] if yaml_content | length > 500 else '' }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.generated_automation_yaml
            data:
              value: "{{ yaml_part1 }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.generated_automation_yaml_2
            data:
              value: "{{ yaml_part2 }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.generated_automation_yaml_3
            data:
              value: "{{ yaml_part3 }}"
          - action: persistent_notification.create
            data:
              title: "‚úÖ Automation YAML Generated"
              message: "Generated automation for {{ entity_name }}. The YAML code is ready in the display card above. Copy it and create a new automation in Home Assistant."
              notification_id: "yaml_generated"

  clear_binary_automation_form:
    alias: "Clear Binary Automation Form"
    description: "Reset all form fields"
    sequence:
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_entity
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_message
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_location
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml_2
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml_3
        data:
          value: ""
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_trigger_state
        data:
          option: "on"
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_level
        data:
          option: "warning"
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_channel
        data:
          option: "main"

# ===================================
# INPUT HELPERS
# ===================================

input_text:
  threshold_entities:
    name: "Threshold Alert Entities"
    initial: ""
    max: 255

  threshold_entities_2:
    name: "Threshold Alert Entities (Group 2)"
    initial: ""
    max: 255

  threshold_entities_3:
    name: "Threshold Alert Entities (Group 3)" 
    initial: ""
    max: 255

  temp_threshold_entity:
    name: "Temporary Threshold Entity"
    initial: ""
    max: 100

  temp_threshold_value:
    name: "Temporary Threshold Value"
    initial: "20"
    max: 20

  temp_threshold_message:
    name: "Temporary Threshold Message"
    initial: ""
    max: 200

  temp_remove_entity:
    name: "Temporary Remove Entity"
    initial: ""
    max: 100

  binary_automation_entity:
    name: "Binary Automation Entity"
    initial: ""
    max: 100

  binary_automation_message:
    name: "Binary Automation Message"
    initial: ""
    max: 200

  binary_automation_location:
    name: "Binary Automation Location"
    initial: ""
    max: 100

  generated_automation_yaml:
    name: "Generated Automation YAML"
    initial: ""
    max: 255

  generated_automation_yaml_2:
    name: "Generated Automation YAML (Part 2)"
    initial: ""
    max: 255

  generated_automation_yaml_3:
    name: "Generated Automation YAML (Part 3)"
    initial: ""
    max: 255

input_boolean:
  threshold_alerts_enabled:
    name: "Enable Threshold Alerts"
    initial: true
    icon: mdi:alert-circle

input_select:
  threshold_alert_channel:
    name: "Default Alert Channel"
    options:
      - main
      - technical
      - both
    initial: main
    icon: mdi:message-alert

  temp_threshold_condition:
    name: "Temporary Threshold Condition"
    options:
      - "above"
      - "below"
    initial: "above"

  binary_automation_level:
    name: "Binary Automation Alert Level"
    options:
      - info
      - warning
      - critical
    initial: warning
    icon: mdi:alert

  binary_automation_channel:
    name: "Binary Automation Alert Channel"
    options:
      - main
      - technical
      - both
    initial: main
    icon: mdi:message-alert

  binary_automation_trigger_state:
    name: "Binary Automation Trigger State"
    options:
      - "on"
      - "off"  
      - "unavailable"
    initial: "on"
    icon: mdi:state-machine

# ===================================
# TEMPLATE SENSORS
# ===================================

template:
  - sensor:
      - name: "Threshold Alert Count"
        unique_id: "pkg_threshold_alert_count"
        state: "{% set count = 0 %}{% for i in range(1, 4) %}{% set entity_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set entities = states(entity_name) %}{% if entities %}{% set count = count + entities.split('|') | length %}{% endif %}{% endfor %}{{ count }}"
        icon: mdi:counter
        
      - name: "Threshold Alert Status"
        unique_id: "pkg_threshold_alert_status"
        state: "{% if is_state('input_boolean.threshold_alerts_enabled', 'on') %}{% set count = states('sensor.threshold_alert_count') | int %}{% if count > 0 %}Monitoring {{ count }} entities{% else %}No entities configured{% endif %}{% else %}Disabled{% endif %}"
        icon: mdi:shield-check

      - name: "Binary Automation Form Status"
        unique_id: "pkg_binary_automation_form_status"
        state: "{% set entity = states('input_text.binary_automation_entity') %}{% set message = states('input_text.binary_automation_message') %}{% if entity != '' and entity != 'unknown' and message != '' and message != 'unknown' %}{% if states(entity) != 'unknown' %}Ready to generate{% else %}Invalid entity{% endif %}{% else %}Fill required fields{% endif %}"
        icon: mdi:form-select

# ===================================
# AUTOMATIONS 
# ===================================

automation:
  - alias: "Threshold Alert Monitor"
    id: "threshold_alert_monitor"
    description: "Monitor entities for threshold breaches"
    trigger:
      - platform: state
        entity_id: sensor.*
    condition:
      - condition: state
        entity_id: input_boolean.threshold_alerts_enabled
        state: 'on'
      - condition: template
        value_template: "{% set triggered_entity = trigger.entity_id %}{% set ns = namespace(found=false) %}{% for i in range(1, 4) %}{% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set entities_text = states(helper_name) %}{% set entities_list = entities_text.split('|') if entities_text else [] %}{% for item in entities_list %}{% set parts = item.split(':') %}{% if parts | length >= 4 and parts[0] == triggered_entity %}{% set ns.found = true %}{% endif %}{% endfor %}{% endfor %}{{ ns.found }}"
    action:
      - variables:
          all_entities: "{% set ns = namespace(entities=[]) %}{% for i in range(1, 4) %}{% set helper_name = 'input_text.threshold_entities' + ('_' + i|string if i > 1 else '') %}{% set entities_text = states(helper_name) %}{% set entities_list = entities_text.split('|') if entities_text else [] %}{% set ns.entities = ns.entities + entities_list %}{% endfor %}{{ ns.entities }}"
          triggered_entity: "{{ trigger.entity_id }}"
          new_state: "{{ trigger.to_state.state }}"
          old_state: "{{ trigger.from_state.state if trigger.from_state else 'unknown' }}"
      - repeat:
          for_each: "{{ all_entities }}"
          sequence:
            - variables:
                parts: "{{ repeat.item.split(':') }}"
                monitor_entity: "{{ parts[0] if parts | length >= 4 else '' }}"
                threshold_value: "{{ parts[1] | float if parts | length >= 4 else 0 }}"
                condition_type: "{{ parts[2] if parts | length >= 4 else 'above' }}"
                alert_message: "{{ parts[3:] | join(':') if parts | length >= 4 else 'Threshold alert' }}"
            - condition: template
              value_template: "{{ monitor_entity == triggered_entity }}"
            - condition: template
              value_template: "{% set current_val = new_state | float(0) %}{% set old_val = old_state | float(0) %}{% set threshold = threshold_value %}{% if condition_type == 'above' %}{{ current_val > threshold and old_val <= threshold }}{% else %}{{ current_val < threshold and old_val >= threshold }}{% endif %}"
            - variables:
                entity_name: "{{ state_attr(monitor_entity, 'friendly_name') or monitor_entity.split('.')[1] | replace('_', ' ') | title }}"
                current_value: "{{ new_state }}"
                unit: "{{ state_attr(monitor_entity, 'unit_of_measurement') or '' }}"
                alert_channel: "{{ states('input_select.threshold_alert_channel') }}"
            - action: script.send_alert
              data:
                message: "üö® {{ alert_message }} - Current value: {{ current_value }} {{ unit }} - Threshold: {{ condition_type }} {{ threshold_value }} {{ unit }}"
                level: warning
                channel: "{{ alert_channel }}"
                location: "{{ entity_name }}"