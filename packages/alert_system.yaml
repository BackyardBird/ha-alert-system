# packages/alert_system.yaml
# Version: 5.5.1 - added offline alert delay support√ü 
# Core alert system with working binary YAML generator

  # ===================================
  # CORE ALERT SYSTEM SCRIPTS
  # ===================================
script:

  send_alert:
    alias: "Send Alert"
    description: "Send a formatted alert via Telegram with automatic location detection"
    fields:
      message:
        description: "Alert message content"
        example: "Kitchen smoke detector activated"
        required: true
      level:
        description: "Alert level (info/warning/critical)"
        example: "warning"
        default: "info"
      location:
        description: "Location/room where alert originated (optional - will auto-detect from entity_id if empty)"
        example: "Kitchen"
        required: false
      entity_id:
        description: "Entity ID for automatic location detection (optional)"
        example: "sensor.kitchen_temperature"
        required: false
      include_timestamp:
        description: "Include timestamp in message"
        example: "true"
        default: true
      chat_id:
        description: "Specific chat ID to send to (optional)"
        example: "-1001234567890"
        required: false
      channel:
        description: "Alert channel (main/technical/both)"
        example: "main"
        default: "main"
    sequence:
      - variables:
          level_emoji: "{% if level == 'critical' %}üö®{% elif level == 'warning' %}‚ö†Ô∏è{% else %}‚ÑπÔ∏è{% endif %}"
          house_name: !secret house_name
          timestamp: "{% if include_timestamp | default(true) %}{{ now().strftime('%H:%M') }}{% endif %}"
          main_chat: !secret telegram_main_alerts
          tech_chat: !secret telegram_technical_alerts
          # Auto-detect location from entity area if location not manually provided
          final_location: >
            {% if location and location != '' %}
              {{ location }}
            {% elif entity_id is defined and entity_id != '' %}
              {{ area_name(entity_id) or '' }}
            {% else %}
              {{ '' }}
            {% endif %}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ chat_id is defined and chat_id != '' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ chat_id | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'main' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'technical' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
                  parse_mode: "HTML"
          - conditions:
              - condition: template
                value_template: "{{ channel == 'both' }}"
            sequence:
              - action: telegram_bot.send_message
                data:
                  target: "{{ main_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
                  parse_mode: "HTML"
              - action: telegram_bot.send_message
                data:
                  target: "{{ tech_chat | int }}"
                  message: "<b>{{ level_emoji }} {{ house_name|upper }} {{ level|upper }}</b> {{ timestamp }}\n{{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
                  parse_mode: "HTML"
        default:
          - action: telegram_bot.send_message
            data:
              target: "{{ tech_chat | int }}"
              message: "<b>‚ö†Ô∏è {{ house_name|upper }} WARNING</b> {{ timestamp }}\nüö® ALERT SYSTEM: Invalid channel '{{ channel }}' specified. Message sent to technical channel as fallback.\n\nOriginal message: {{ message | e }}{% if final_location %}\nüìç {{ final_location | e }}{% endif %}"
              parse_mode: "HTML"

  quick_alert:
    alias: "Quick Alert"
    description: "Send a simple info-level alert to main channel"
    fields:
      message:
        description: "Alert message"
        required: true
        example: "Water leak detected in basement"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
        example: "-1001234567890"
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "info"
          channel: "main"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  system_alert:
    alias: "System Alert"
    description: "Send a system-level alert to technical channel"
    fields:
      message:
        description: "System alert message"
        required: true
        example: "High CPU usage detected"
      level:
        description: "Alert level"
        default: "warning"
      channel:
        description: "Alert channel (main/technical/both)"
        default: "technical"
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
        example: "-1001234567890"
    sequence:
      - action: script.send_alert
        data:
          message: "üñ•Ô∏è SYSTEM: {{ message }}"
          level: "{{ level | default('warning') }}"
          channel: "{{ channel | default('technical') }}"
          chat_id: "{{ chat_id | default('') }}"
          location: ""
          include_timestamp: true

  security_alert:
    alias: "Security Alert"
    description: "Send a security alert to both channels with automatic location detection"
    fields:
      message:
        description: "Security alert message"
        required: true
        example: "Motion detected when house is empty"
      location:
        description: "Location of security event (optional - will auto-detect from entity_id if empty)"
        required: false
        example: "Front Door"
      entity_id:
        description: "Entity ID for automatic location detection (optional)"
        example: "binary_sensor.front_door_motion"
        required: false
      chat_id:
        description: "Specific chat ID (optional)"
        required: false
        example: "-1001234567890"
    sequence:
      - action: script.send_alert
        data:
          message: "üîí SECURITY: {{ message }}"
          level: "critical"
          location: "{{ location | default('') }}"
          entity_id: "{{ entity_id | default('') }}"
          channel: "both"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  device_alert:
      alias: "Device Alert"
      description: "Send a device-related alert to technical channel with automatic location detection"
      fields:
        device_name:
          description: "Name of the device"
          required: true
          example: "Living Room Sensor"
        message:
          description: "Device alert message"
          required: true
          example: "Battery low"
        entity_id:
          description: "Entity ID for automatic location detection (optional)"
          example: "sensor.living_room_temperature"
          required: false
        level:
          description: "Alert level"
          default: "info"
        channel:
          description: "Alert channel (main/technical/both)"
          default: "technical"
        chat_id:
          description: "Specific chat ID (optional)"
          required: false
          example: "-1001234567890"
      sequence:
        - action: script.send_alert
          data:
            message: "{{ device_name }}: {{ message }}"
            level: "{{ level | default('info') }}"
            channel: "{{ channel | default('technical') }}"
            entity_id: "{{ entity_id | default('') }}"
            chat_id: "{{ chat_id | default('') }}"
            include_timestamp: true

  bulk_alert:
    alias: "Bulk Alert"
    description: "Send multiple alerts at once"
    fields:
      alerts:
        description: "List of alerts to send"
        required: true
        example: |
          - message: "Kitchen smoke detector activated"
            level: "critical"
            location: "Kitchen"
            channel: "both"
          - message: "Living room temperature is 28¬∞C"
            level: "warning"
            location: "Living Room"
            channel: "main"
          - message: "Backup completed successfully"
            level: "info"
            channel: "technical"
    sequence:
      - repeat:
          for_each: "{{ alerts }}"
          sequence:
            - action: script.send_alert
              data:
                message: "{{ repeat.item.message }}"
                level: "{{ repeat.item.level | default('info') }}"
                location: "{{ repeat.item.location | default('') }}"
                channel: "{{ repeat.item.channel | default('main') }}"
                chat_id: "{{ repeat.item.chat_id | default('') }}"

  tech_alert:
    alias: "Technical Alert"
    description: "Send alert specifically to technical channel"
    fields:
      message:
        description: "Technical alert message"
        required: true
        example: "Sensor battery low"
      entity_id:
        description: "Entity ID for automatic location detection (optional)"
        example: "sensor.living_room_temperature"
        required: false
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
        example: "Living Room"
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          entity_id: "{{ entity_id | default('') }}"
          channel: "technical"
          include_timestamp: true

  main_alert:
    alias: "Main Alert"
    description: "Send alert specifically to main channel"
    fields:
      message:
        description: "Main alert message"
        required: true
        example: "Water leak detected in basement"
      entity_id:
        description: "Entity ID for automatic location detection (optional)"
        example: "binary_sensor.basement_water_sensor"
        required: false
      level:
        description: "Alert level"
        default: "info"
      location:
        description: "Location (optional)"
        required: false
        example: "Basement"
    sequence:
      - action: script.send_alert
        data:
          message: "{{ message }}"
          level: "{{ level | default('info') }}"
          location: "{{ location | default('') }}"
          entity_id: "{{ entity_id | default('') }}"
          channel: "main"
          include_timestamp: true

  test_alert:
    alias: "Test Alert System"
    description: "Send a test alert to verify the system is working"
    fields:
      chat_id:
        description: "Specific chat ID to test (optional)"
        required: false
      channel:
        description: "Channel to test (main/technical/both)"
        default: "both"
    sequence:
      - action: script.send_alert
        data:
          message: "Alert system test - everything is working correctly! üéâ"
          level: "info"
          channel: "{{ channel | default('both') }}"
          chat_id: "{{ chat_id | default('') }}"
          include_timestamp: true

  # ===================================
  # THRESHOLD ALERT SYSTEM SCRIPTS
  # ===================================

  add_threshold_alert:
    alias: "Add Threshold Alert"
    description: "Add an entity to threshold monitoring with optional offline delay"
    fields:
      entity_id:
        description: "Entity to monitor"
        required: true
        example: "sensor.temperature"
      threshold:
        description: "Threshold value"
        required: true
        example: "25"
      condition:
        description: "Trigger condition"
        required: true
        example: "above"
      custom_message:
        description: "Custom alert message (optional)"
        required: false
        example: "Temperature is critical"
      offline_min:
        description: "Custom offline delay in minutes (optional, blank = use global)"
        required: false
        example: "10"
    sequence:
      - variables:
          entity_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id.split('.')[1] | replace('_', ' ') | title }}"
          default_message: "{% if condition == 'above' %}{{ entity_name }} is above threshold{% else %}{{ entity_name }} is below threshold{% endif %}"
          alert_message: "{{ custom_message if custom_message else default_message }}"
          # Only add delay part if offline_min is provided and valid
          delay_part: "{% if offline_min and offline_min != '' and offline_min | int >= 0 %}:{{ offline_min }}{% endif %}"
          new_entry: "{{ entity_id }}:{{ threshold }}:{{ condition }}:{{ alert_message }}{{ delay_part }}"
      
      # Try to add to first available helper
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ (states('input_text.threshold_entities') | length + new_entry | length + 1) <= 250 }}"
            sequence:
              - action: input_text.set_value
                target:
                  entity_id: input_text.threshold_entities
                data:
                  value: "{% if states('input_text.threshold_entities') %}{{ states('input_text.threshold_entities') }}|{{ new_entry }}{% else %}{{ new_entry }}{% endif %}"
              - action: script.tech_alert
                data:
                  message: "Added threshold alert for {{ entity_name }}: {{ condition }} {{ threshold }}{% if offline_min and offline_min != '' %}, offline delay: {{ offline_min }}min{% endif %}"
                  level: info
          - conditions:
              - condition: template
                value_template: "{{ (states('input_text.threshold_entities_2') | length + new_entry | length + 1) <= 250 }}"
            sequence:
              - action: input_text.set_value
                target:
                  entity_id: input_text.threshold_entities_2
                data:
                  value: "{% if states('input_text.threshold_entities_2') %}{{ states('input_text.threshold_entities_2') }}|{{ new_entry }}{% else %}{{ new_entry }}{% endif %}"
              - action: script.tech_alert
                data:
                  message: "Added threshold alert for {{ entity_name }}: {{ condition }} {{ threshold }}{% if offline_min and offline_min != '' %}, offline delay: {{ offline_min }}min{% endif %}"
                  level: info
          - conditions:
              - condition: template
                value_template: "{{ (states('input_text.threshold_entities_3') | length + new_entry | length + 1) <= 250 }}"
            sequence:
              - action: input_text.set_value
                target:
                  entity_id: input_text.threshold_entities_3
                data:
                  value: "{% if states('input_text.threshold_entities_3') %}{{ states('input_text.threshold_entities_3') }}|{{ new_entry }}{% else %}{{ new_entry }}{% endif %}"
              - action: script.tech_alert
                data:
                  message: "Added threshold alert for {{ entity_name }}: {{ condition }} {{ threshold }}{% if offline_min and offline_min != '' %}, offline delay: {{ offline_min }}min{% endif %}"
                  level: info
        default:
          - action: script.tech_alert
            data:
              message: "Error: All threshold storage helpers are full. Please remove some entities first."
              level: warning

  remove_threshold_alert:
    alias: "Remove Threshold Alert"
    description: "Remove an entity from threshold monitoring"
    fields:
      entity_id:
        description: "Entity to remove"
        required: true
    sequence:
      # Remove from each helper if present
      - if:
          - condition: template
            value_template: "{{ entity_id + ':' in states('input_text.threshold_entities') }}"
        then:
          - variables:
              entries: "{{ states('input_text.threshold_entities').split('|') }}"
              filtered_entries: "{{ entries | reject('match', '^' + entity_id + ':.*') | list }}"
              new_content: "{{ filtered_entries | join('|') }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.threshold_entities
            data:
              value: "{{ new_content }}"
      - if:
          - condition: template
            value_template: "{{ entity_id + ':' in states('input_text.threshold_entities_2') }}"
        then:
          - variables:
              entries: "{{ states('input_text.threshold_entities_2').split('|') }}"
              filtered_entries: "{{ entries | reject('match', '^' + entity_id + ':.*') | list }}"
              new_content: "{{ filtered_entries | join('|') }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.threshold_entities_2
            data:
              value: "{{ new_content }}"
      - if:
          - condition: template
            value_template: "{{ entity_id + ':' in states('input_text.threshold_entities_3') }}"
        then:
          - variables:
              entries: "{{ states('input_text.threshold_entities_3').split('|') }}"
              filtered_entries: "{{ entries | reject('match', '^' + entity_id + ':.*') | list }}"
              new_content: "{{ filtered_entries | join('|') }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.threshold_entities_3
            data:
              value: "{{ new_content }}"
      - action: script.tech_alert
        data:
          message: "Remove operation completed for {{ entity_id }}. Use 'List All' to verify."
          level: info

  create_threshold_alert_from_form:
    alias: "Create Threshold Alert from Form"
    description: "Create threshold alert using the card form inputs with enhanced validation and offline delay support"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_threshold_entity') }}"
          threshold: "{{ states('input_text.temp_threshold_value') }}"
          condition: "{{ states('input_select.temp_threshold_condition') }}"
          message: "{{ states('input_text.temp_threshold_message') }}"
          offline_delay: "{{ states('input_text.temp_offline_min') }}"
      
      # Simple validation
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ entity_id == '' or entity_id == 'unavailable' or entity_id == 'unknown' }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "Error: Please enter an entity ID"
                  level: warning
          - conditions:
              - condition: template
                value_template: "{{ '.' not in entity_id }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "Error: Entity ID must contain a dot (like sensor.temperature)"
                  level: warning
          - conditions:
              - condition: template
                value_template: "{{ states(entity_id) in ['unknown', 'unavailable'] }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "Error: Entity '{{ entity_id }}' not found. Please check the entity ID."
                  level: warning
        default:
          # Entity is valid, proceed with creation
          - action: script.add_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
              threshold: "{{ threshold }}"
              condition: "{{ condition }}"
              custom_message: "{{ message if message != '' else '' }}"
              offline_min: "{{ offline_delay if offline_delay != '' and offline_delay | int >= 0 else '' }}"
          
          # Clear the form after successful creation
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_threshold_entity
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_threshold_message
            data:
              value: ""
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_threshold_value
            data:
              value: "20"
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_offline_min
            data:
              value: ""

  remove_threshold_alert_from_form:
    alias: "Remove Threshold Alert from Form"
    description: "Remove threshold alert using the card form"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.temp_remove_entity') }}"
      - if:
          - condition: template
            value_template: "{{ entity_id != '' and entity_id != 'unknown' and entity_id != 'unavailable' }}"
        then:
          - action: script.remove_threshold_alert
            data:
              entity_id: "{{ entity_id }}"
          - action: input_text.set_value
            target:
              entity_id: input_text.temp_remove_entity
            data:
              value: ""
        else:
          - action: script.tech_alert
            data:
              message: "Error: Please enter a valid entity ID to remove"
              level: warning

  list_threshold_alerts:
    alias: "List Enhanced Threshold Alerts"
    description: "Show all threshold alerts with offline delay information"
    sequence:
      - action: script.tech_alert
        data:
          message: |
            üìä ENHANCED THRESHOLD ALERTS

            Global offline delay: {{ states('input_number.device_offline_delay_minutes') }} minutes

            Helper 1: {{ states('input_text.threshold_entities') or 'Empty' }}
            Helper 2: {{ states('input_text.threshold_entities_2') or 'Empty' }}  
            Helper 3: {{ states('input_text.threshold_entities_3') or 'Empty' }}

            Format: entity:threshold:condition:message:offline_min
            (offline_min is optional - blank means use global)
          level: info

  clear_all_threshold_alerts:
    alias: "Clear All Threshold Alerts"
    description: "Remove all configured threshold alerts"
    sequence:
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_2
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.threshold_entities_3
        data:
          value: ""
      - action: script.tech_alert
        data:
          message: "All threshold alerts have been cleared"
          level: warning

  test_threshold_alert:
    alias: "Test Threshold Alert"
    description: "Send a test threshold alert"
    sequence:
      - action: script.send_alert
        data:
          message: |
            üß™ THRESHOLD ALERT TEST

            This is a test of the threshold alert system.
            Current time: {{ now().strftime('%H:%M:%S') }}
          level: info
          channel: "{{ states('input_select.threshold_alert_channel') }}"
          location: "Test System"

  validate_binary_automation_form:
    alias: "Validate Binary Automation Form"
    description: "Validate the binary sensor automation form inputs"
    sequence:
      - variables:
          entity_id: "{{ states('input_text.binary_automation_entity') | trim }}"
          message: "{{ states('input_text.binary_automation_message') | trim }}"
          trigger_state: "{{ states('input_select.binary_automation_trigger_state') }}"
          level: "{{ states('input_select.binary_automation_level') }}"
          channel: "{{ states('input_select.binary_automation_channel') }}"
          location: "{{ states('input_text.binary_automation_location') | trim }}"
      
      # Comprehensive validation checks
      - choose:
          # Check if entity ID is empty
          - conditions:
              - condition: template
                value_template: "{{ entity_id == '' or entity_id == 'unavailable' or entity_id == 'unknown' }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ùå VALIDATION ERROR: Please enter a binary sensor entity ID"
                  level: "warning"
          
          # Check if entity ID has correct format
          - conditions:
              - condition: template
                value_template: "{{ '.' not in entity_id }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ùå VALIDATION ERROR: Entity ID must contain a dot (example: binary_sensor.front_door)"
                  level: "warning"
          
          # Check if it's a binary sensor (not regular sensor)
          - conditions:
              - condition: template
                value_template: "{{ not entity_id.startswith('binary_sensor.') }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ö†Ô∏è VALIDATION WARNING: Entity should start with 'binary_sensor.' not 'sensor.' - Use {{ entity_id.replace('sensor.', 'binary_sensor.') if entity_id.startswith('sensor.') else 'binary_sensor.' + entity_id.split('.')[-1] }}"
                  level: "warning"
          
          # Check if entity exists in Home Assistant
          - conditions:
              - condition: template
                value_template: "{{ states(entity_id) in ['unknown'] }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ùå VALIDATION ERROR: Entity '{{ entity_id }}' not found in Home Assistant. Check Developer Tools ‚Üí States to verify the correct entity ID."
                  level: "warning"
          
          # Check if message is empty
          - conditions:
              - condition: template
                value_template: "{{ message == '' or message == 'unavailable' or message == 'unknown' }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ùå VALIDATION ERROR: Please enter an alert message"
                  level: "warning"
          
          # Entity exists but is currently unavailable (warn but allow)
          - conditions:
              - condition: template
                value_template: "{{ states(entity_id) in ['unavailable'] }}"
            sequence:
              - action: script.tech_alert
                data:
                  message: "‚ö†Ô∏è VALIDATION WARNING: Entity '{{ entity_id }}' exists but is currently unavailable. The automation will still be created but may not work until the device comes online."
                  level: "info"
                  
        # All validations passed - success message
        default:
          - variables:
              entity_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id.split('.')[1] | replace('_', ' ') | title }}"
              current_state: "{{ states(entity_id) }}"
              location_text: "{% if location %}{{ location }}{% else %}No location specified{% endif %}"
          - action: script.tech_alert
            data:
              message: |
                ‚úÖ VALIDATION SUCCESS: Binary automation form is valid!
                
                üìã Configuration Summary:
                ‚Ä¢ Entity: {{ entity_name }} ({{ entity_id }})
                ‚Ä¢ Current State: {{ current_state }}
                ‚Ä¢ Trigger: When state changes to "{{ trigger_state }}"
                ‚Ä¢ Alert Level: {{ level }}
                ‚Ä¢ Channel: {{ channel }}
                ‚Ä¢ Location: {{ location_text }}
                ‚Ä¢ Message: "{{ message }}"
                
                üéØ Next Steps:
                1. Copy the generated YAML code below the form
                2. Go to Settings ‚Üí Automations & Scenes ‚Üí Create Automation
                3. Click the ‚ãÆ menu ‚Üí Edit in YAML
                4. Paste the code and save your automation
              level: "info"

  delayed_offline_alert:
    alias: "Delayed Offline Alert"
    description: "Send offline alert after delay if device is still offline"
    fields:
      entity_id:
        description: "Entity that went offline"
        required: true
      initial_state:
        description: "State when device went offline"
        required: true
      delay_minutes:
        description: "Minutes to wait (optional - uses global if not specified)"
        required: false
    mode: parallel
    max: 50
    sequence:
      - variables:
          # Use passed delay or fall back to global setting
          final_delay: "{{ delay_minutes | int if delay_minutes is defined and delay_minutes != '' else states('input_number.device_offline_delay_minutes') | int }}"
          friendly_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id.split('.')[1] | replace('_', ' ') | title }}"
      
      # Only proceed if delay is greater than 0
      - condition: template
        value_template: "{{ final_delay > 0 }}"
      
      # Wait for the delay
      - delay:
          minutes: "{{ final_delay }}"
      
      # Check if device is still offline after delay
      - condition: template
        value_template: "{{ states(entity_id) in ['unavailable', 'unknown'] }}"
      
      # Send the alert with custom delay indication
      - action: script.send_alert
        data:
          message: "üìµ DEVICE OFFLINE: {{ friendly_name }} has been {{ states(entity_id) }} for {{ final_delay }} minute{{ 's' if final_delay != 1 else '' }}{% if delay_minutes is defined and delay_minutes != '' and delay_minutes | int != states('input_number.device_offline_delay_minutes') | int %} (custom delay){% endif %}"
          level: "warning"
          channel: "technical"
          location: "{{ friendly_name }}"

# ===================================
# BINARY SENSOR AUTOMATION GENERATOR
# ===================================

  clear_binary_automation_form:
    alias: "Clear Binary Automation Form"
    description: "Reset all form fields"
    sequence:
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_entity
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_message
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.binary_automation_location
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml_2
        data:
          value: ""
      - action: input_text.set_value
        target:
          entity_id: input_text.generated_automation_yaml_3
        data:
          value: ""
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_trigger_state
        data:
          option: "on"
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_level
        data:
          option: "warning"
      - action: input_select.select_option
        target:
          entity_id: input_select.binary_automation_channel
        data:
          option: "main"

# ===================================
# INPUT HELPERS
# ===================================

input_text:
  # Threshold alert storage helpers - REMOVED initial: "" to preserve data across reboots
  # Enhanced threshold storage helpers with multiline support
  threshold_entities:
    name: "Threshold Alert Entities"
    max: 255
    mode: text          # This makes it a textarea instead of single line
    
  threshold_entities_2:
    name: "Threshold Alert Entities (Group 2)"
    max: 255
    mode: text          # This makes it a textarea instead of single line
    
  threshold_entities_3:
    name: "Threshold Alert Entities (Group 3)"
    max: 255
    mode: text          # This makes it a textarea instead of single line

  temp_offline_min:
    name: "Temporary Offline Delay (minutes)"
    initial: ""
    max: 3
    icon: mdi:timer

  # Threshold form helpers
  temp_threshold_entity:
    name: "Temporary Threshold Entity"
    initial: ""
    max: 100

  temp_threshold_value:
    name: "Temporary Threshold Value"
    initial: "20"
    max: 20

  temp_threshold_message:
    name: "Temporary Threshold Message"
    initial: ""
    max: 200

  temp_remove_entity:
    name: "Temporary Remove Entity"
    initial: ""
    max: 100

  # Binary automation form helpers
  binary_automation_entity:
    name: "Binary Automation Entity"
    initial: ""
    max: 100

  binary_automation_message:
    name: "Binary Automation Message"
    initial: ""
    max: 200

  binary_automation_location:
    name: "Binary Automation Location"
    initial: ""
    max: 100

input_boolean:
  threshold_alerts_enabled:
    name: "Enable Threshold Alerts"
    initial: true
    icon: mdi:alert-circle

input_select:
  threshold_alert_channel:
    name: "Default Alert Channel"
    options:
      - main
      - technical
      - both
    initial: main
    icon: mdi:message-alert

  temp_threshold_condition:
    name: "Temporary Threshold Condition"
    options:
      - "above"
      - "below"
    initial: "above"

  binary_automation_level:
    name: "Binary Automation Alert Level"
    options:
      - info
      - warning
      - critical
    initial: "warning"
    icon: mdi:alert

  binary_automation_channel:
    name: "Binary Automation Alert Channel"
    options:
      - main
      - technical
      - both
    initial: "technical"
    icon: mdi:message-alert

  binary_automation_trigger_state:
    name: "Binary Automation Trigger State"
    options:
      - "on"
      - "off"
      - "Device Offline"
    initial: "on"
    icon: mdi:state-machine

input_number:
  device_offline_delay_minutes:
    name: "Device Offline Alert Delay"
    min: 0
    max: 60
    step: 1
    initial: 5
    unit_of_measurement: "minutes"
    icon: mdi:timer

# ===================================
# TEMPLATE SENSORS
# ===================================

template:
  - sensor:
      - name: "Threshold Alert Count"
        unique_id: "pkg_threshold_alert_count"
        state: "{% set h1 = states('input_text.threshold_entities') %}{% set h2 = states('input_text.threshold_entities_2') %}{% set h3 = states('input_text.threshold_entities_3') %}{{ (h1.split('|') | length if h1 != '' else 0) + (h2.split('|') | length if h2 != '' else 0) + (h3.split('|') | length if h3 != '' else 0) }}"
        icon: mdi:counter

      - name: "Threshold Alert Status"
        unique_id: "pkg_threshold_alert_status"
        state: "{% if is_state('input_boolean.threshold_alerts_enabled', 'on') %}{% set count = states('sensor.threshold_alert_count') | int %}{% if count > 0 %}Monitoring {{ count }} entities{% else %}No entities configured{% endif %}{% else %}Disabled{% endif %}"
        icon: mdi:shield-check

      - name: "Binary Automation Form Status"
        unique_id: "pkg_binary_automation_form_status"
        state: "{% set entity = states('input_text.binary_automation_entity') %}{% set message = states('input_text.binary_automation_message') %}{% if entity != '' and entity != 'unknown' and message != '' and message != 'unknown' %}{% if states(entity) not in ['unknown', 'unavailable'] %}Ready to generate{% else %}Invalid entity{% endif %}{% else %}Fill required fields{% endif %}"
        icon: mdi:form-select

# ===================================
# AUTOMATIONS
# ===================================

automation:
  - alias: "Threshold Alert Monitor"
    id: "threshold_alert_monitor"
    description: "Monitor entities for threshold breaches with device availability alerts and device-specific offline delays"
    trigger:
      - trigger: event
        event_type: state_changed
    condition:
      - condition: state
        entity_id: input_boolean.threshold_alerts_enabled
        state: "on"
      - condition: template
        value_template: "{{ trigger.event.data.entity_id.startswith('sensor.') }}"
      - condition: or
        conditions:
          - condition: template
            value_template: "{{ trigger.event.data.entity_id + ':' in states('input_text.threshold_entities') }}"
          - condition: template
            value_template: "{{ trigger.event.data.entity_id + ':' in states('input_text.threshold_entities_2') }}"
          - condition: template
            value_template: "{{ trigger.event.data.entity_id + ':' in states('input_text.threshold_entities_3') }}"
    action:
      - variables:
          triggered_entity: "{{ trigger.event.data.entity_id }}"
          new_state: "{{ trigger.event.data.new_state.state }}"
          old_state: "{{ trigger.event.data.old_state.state if trigger.event.data.old_state else 'unknown' }}"
          all_content: "{{ states('input_text.threshold_entities') }}|{{ states('input_text.threshold_entities_2') }}|{{ states('input_text.threshold_entities_3') }}"
          # Check if states are numeric (availability check)
          new_is_number: "{{ new_state | regex_match('^-?[0-9]+\\.?[0-9]*$') }}"
          old_is_number: "{{ old_state | regex_match('^-?[0-9]+\\.?[0-9]*$') }}"
          device_went_offline: "{{ old_is_number and not new_is_number and new_state in ['unavailable', 'unknown'] }}"
          device_came_online: "{{ not old_is_number and new_is_number and old_state in ['unavailable', 'unknown'] }}"
          # Smart delay lookup: check threshold data for device-specific delay, fallback to global
          device_specific_delay: >
            {% set entity = triggered_entity %}
            {% set entries = all_content.split('|') %}
            {% set found_delay = '' %}
            {% for entry in entries %}
              {% if entry != '' and entry.startswith(entity + ':') %}
                {% set parts = entry.split(':') %}
                {% if parts|length >= 5 and parts[4] != '' and parts[4]|int >= 0 %}
                  {% set found_delay = parts[4]|int %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ found_delay if found_delay != '' else states('input_number.device_offline_delay_minutes')|int }}
      
      # Handle device going offline - use device-specific or global delay
      - if:
          - condition: template
            value_template: "{{ device_went_offline }}"
        then:
          - choose:
              # If delay is 0, send immediate alert
              - conditions:
                  - condition: template
                    value_template: "{{ device_specific_delay == 0 }}"
                sequence:
                  - action: script.send_alert
                    data:
                      message: "üìµ DEVICE OFFLINE: {{ state_attr(triggered_entity, 'friendly_name') or triggered_entity.split('.')[1] | replace('_', ' ') | title }} is now {{ new_state }}"
                      level: "warning"
                      channel: "technical"
                      location: "{{ state_attr(triggered_entity, 'friendly_name') or triggered_entity.split('.')[1] | replace('_', ' ') | title }}"
            # If delay is configured, start delayed alert script
            default:
              - action: script.delayed_offline_alert
                data:
                  entity_id: "{{ triggered_entity }}"
                  initial_state: "{{ new_state }}"
                  delay_minutes: "{{ device_specific_delay }}"
      
      # Handle device coming back online (immediate alert)
      - if:
          - condition: template
            value_template: "{{ device_came_online }}"
        then:
          - variables:
              unit_raw: "{{ state_attr(triggered_entity, 'unit_of_measurement') }}"
              unit_text: "{% if unit_raw %}{{ ' ' + unit_raw }}{% else %}{% endif %}"
              current_clean: "{{ new_state | float | int if (new_state | float) == (new_state | float | int) else (new_state | float | round(1)) }}"
          - action: script.send_alert
            data:
              message: "üì∂ DEVICE ONLINE: {{ state_attr(triggered_entity, 'friendly_name') or triggered_entity.split('.')[1] | replace('_', ' ') | title }} is back online ({{ current_clean }}{{ unit_text }})"
              level: "info"
              channel: "technical"
              location: "{{ state_attr(triggered_entity, 'friendly_name') or triggered_entity.split('.')[1] | replace('_', ' ') | title }}"
      
      # Process threshold logic only if both states are numeric (unchanged)
      - if:
          - condition: template
            value_template: "{{ new_is_number and old_is_number }}"
        then:
          - repeat:
              for_each: "{{ all_content.split('|') }}"
              sequence:
                - if:
                    - condition: template
                      value_template: "{{ repeat.item != '' and repeat.item.startswith(triggered_entity + ':') }}"
                  then:
                    - variables:
                        parts: "{{ repeat.item.split(':') }}"
                        threshold_value: "{{ parts[1] | float }}"
                        condition_type: "{{ parts[2] }}"
                        alert_message: "{{ parts[3] if parts | length > 3 else 'Threshold alert' }}"
                        current_val: "{{ new_state | float }}"
                        old_val: "{{ old_state | float }}"
                        threshold_crossed: "{% if condition_type == 'above' %}{{ current_val > threshold_value and old_val <= threshold_value }}{% else %}{{ current_val < threshold_value and old_val >= threshold_value }}{% endif %}"
                    - if:
                        - condition: template
                          value_template: "{{ threshold_crossed }}"
                      then:
                        - variables:
                            unit_raw: "{{ state_attr(triggered_entity, 'unit_of_measurement') }}"
                            unit_text: "{% if unit_raw %}{{ ' ' + unit_raw }}{% else %}{% endif %}"
                            current_clean: "{% if current_val == (current_val | int) %}{{ current_val | int }}{% else %}{{ current_val | round(1) }}{% endif %}"
                            threshold_clean: "{% if threshold_value == (threshold_value | int) %}{{ threshold_value | int }}{% else %}{{ threshold_value | round(1) }}{% endif %}"
                        - action: script.send_alert
                          data:
                            message: "üö® {{ alert_message }} - Current: {{ current_clean }}{{ unit_text }} - Threshold: {{ condition_type }} {{ threshold_clean }}{{ unit_text }}"
                            level: warning
                            channel: "{{ states('input_select.threshold_alert_channel') }}"
                            location: "{{ state_attr(triggered_entity, 'friendly_name') or triggered_entity.split('.')[1] | replace('_', ' ') | title }}"

  - alias: Saturday Morning Status Report Example
    id: status_report_template
    description: >-
      Send weekly status report every Saturday at 10am using bulk alerts with real
      sensor data
    triggers:
      - at: "11:00:00"
        trigger: time
        weekday:
          - sat
    conditions: []
    actions:
      - data:
          alerts:
            - message: üåÖ Saturday Morning Report - {{ now().strftime('%B %d, %Y') }}
              level: info
              channel: main
            - message: >-
                Current {{ state_attr('sensor.temperature', 'friendly_name') or
                'Temperature' }}: {{ states('sensor.temperature') }}{{
                state_attr('sensor.temperature', 'unit_of_measurement') or '¬∞C' }}
              level: info
              location: Climate
              channel: main
            - message: >-
                Current {{ state_attr('sensor.humidity', 'friendly_name') or
                'Humidity' }}: {{ states('sensor.humidity') }}{{
                state_attr('sensor.humidity', 'unit_of_measurement') or '%' }}
              level: "{{ 'warning' if states('sensor.humidity')|float > 70 else 'info' }}"
              location: Climate
              channel: main
            - message: >-
                {{ state_attr('sensor.uptime', 'friendly_name') or 'System' }}
                uptime: {{ states('sensor.uptime') }} days
              level: info
              location: System
              channel: technical
            - message: >-
                Yesterday's energy usage: {{ state_attr('sensor.energy_daily',
                'friendly_name') or 'Energy Monitor' }} - {{
                states('sensor.energy_daily') }}{{ state_attr('sensor.energy_daily',
                'unit_of_measurement') or ' kWh' }}
              level: >-
                {{ 'warning' if states('sensor.energy_daily')|float > 50 else 'info'
                }}
              location: Energy Monitor
              channel: main
            - message: Have a great Saturday! ‚òï
              level: info
              channel: main
        action: script.bulk_alert
    mode: single

  - alias: "Complex Threshold Alert with Auto-Location Example"
    description: "Advanced threshold alert with friendly names, values, units, and automatic location detection"
    trigger:
      - platform: numeric_state
        entity_id: sensor.living_room_temperature  # Replace with your sensor
        above: 25  # Replace with your threshold value
        for: "00:02:00"  # Optional: Wait 2 minutes before alerting (prevents flapping)
      - platform: numeric_state
        entity_id: sensor.bedroom_humidity  # Replace with your sensor  
        above: 70  # Replace with your threshold value
        for: "00:05:00"  # Optional: Wait 5 minutes before alerting
      - platform: numeric_state
        entity_id: sensor.basement_temperature  # Replace with your sensor
        below: 15  # Replace with your threshold value
        for: "00:01:00"  # Optional: Wait 1 minute before alerting
    condition:
      # Optional: Only alert during certain times or conditions
      - condition: time
        after: "06:00:00"
        before: "23:00:00"
      # Optional: Only alert when someone is home
      # - condition: state
      #   entity_id: group.all_people
      #   state: "home"
    action:
      - variables:
          # Entity information
          triggered_entity: "{{ trigger.entity_id }}"
          entity_friendly_name: "{{ state_attr(trigger.entity_id, 'friendly_name') or trigger.entity_id.split('.')[1] | replace('_', ' ') | title }}"
          
          # Current state and formatting
          current_state: "{{ trigger.to_state.state }}"
          previous_state: "{{ trigger.from_state.state }}"
          unit_of_measurement: "{{ state_attr(trigger.entity_id, 'unit_of_measurement') }}"
          unit_text: "{% if unit_of_measurement %}{{ unit_of_measurement }}{% else %}{% endif %}"
          
          # Format numbers nicely (remove unnecessary decimals)
          current_value_clean: "{% if current_state | float == current_state | float | int %}{{ current_state | float | int }}{% else %}{{ current_state | float | round(1) }}{% endif %}"
          previous_value_clean: "{% if previous_state | float == previous_state | float | int %}{{ previous_state | float | int }}{% else %}{{ previous_state | float | round(1) }}{% endif %}"
          
          # Determine threshold information based on trigger
          threshold_value: >
            {% if trigger.platform == 'numeric_state' and trigger.above is defined %}
              {{ trigger.above }}
            {% elif trigger.platform == 'numeric_state' and trigger.below is defined %}
              {{ trigger.below }}
            {% else %}
              Unknown
            {% endif %}
          
          threshold_condition: >
            {% if trigger.platform == 'numeric_state' and trigger.above is defined %}
              above
            {% elif trigger.platform == 'numeric_state' and trigger.below is defined %}
              below
            {% else %}
              unknown condition
            {% endif %}
          
          threshold_clean: "{% if threshold_value != 'Unknown' and threshold_value | float == threshold_value | float | int %}{{ threshold_value | float | int }}{% else %}{{ threshold_value | float | round(1) if threshold_value != 'Unknown' else 'Unknown' }}{% endif %}"
          
          # Determine alert level based on how far from threshold
          threshold_difference: "{{ (current_state | float - threshold_value | float) | abs if threshold_value != 'Unknown' else 0 }}"
          alert_level: >
            {% if threshold_difference | float > (threshold_value | float * 0.2) %}
              critical
            {% elif threshold_difference | float > (threshold_value | float * 0.1) %}
              warning
            {% else %}
              info
            {% endif %}
          
          # Create rich alert message
          alert_message: >
            üå°Ô∏è THRESHOLD ALERT: {{ entity_friendly_name }}
            
            üìä Current: {{ current_value_clean }}{{ unit_text }} (was {{ previous_value_clean }}{{ unit_text }})
            ‚ö†Ô∏è Threshold: {{ threshold_condition }} {{ threshold_clean }}{{ unit_text }}
            üìà Change: {{ ((current_state | float - previous_state | float) | round(1)) }}{{ unit_text }}
            {% if threshold_difference | float > 0 %}
            üö® Exceeded by: {{ threshold_difference | round(1) }}{{ unit_text }}
            {% endif %}
          
          # Determine appropriate channel based on severity
          alert_channel: >
            {% if alert_level == 'critical' %}
              both
            {% elif triggered_entity.startswith('sensor.') and 'temperature' in triggered_entity %}
              main
            {% else %}
              technical
            {% endif %}
      
      - action: script.send_alert
        data:
          message: "{{ alert_message }}"
          level: "{{ alert_level }}"
          channel: "{{ alert_channel }}"
          entity_id: "{{ triggered_entity }}"  # Auto-location will be determined from this
          include_timestamp: true

      # Optional: Send additional notification for critical alerts
      - if:
          - condition: template
            value_template: "{{ alert_level == 'critical' }}"
        then:
          - delay:
              seconds: 30
          - action: script.send_alert
            data:
              message: "üö® CRITICAL FOLLOW-UP: {{ entity_friendly_name }} remains at {{ current_value_clean }}{{ unit_text }} (threshold: {{ threshold_condition }} {{ threshold_clean }}{{ unit_text }})"
              level: "critical"
              channel: "both"
              entity_id: "{{ triggered_entity }}"

      # Optional: Log detailed information for troubleshooting
      - action: system_log.write
        data:
          message: "Threshold alert triggered: {{ entity_friendly_name }} = {{ current_value_clean }}{{ unit_text }}, threshold = {{ threshold_condition }} {{ threshold_clean }}{{ unit_text }}, location = {{ area_name(triggered_entity) or 'No area assigned' }}"
          level: warning

    mode: single  # Prevent multiple instances of same automation
    max_exceeded: silent  # Don't log if automation is already running

# ===================================
# END OF ALERT SYSTEM PACKAGE
# ===================================